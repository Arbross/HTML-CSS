#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQ_TO_SQL_TWO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MusicCollection")]
	public partial class MusicCollectionDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertMusicDiscs(MusicDiscs instance);
    partial void UpdateMusicDiscs(MusicDiscs instance);
    partial void DeleteMusicDiscs(MusicDiscs instance);
    partial void InsertPerformers(Performers instance);
    partial void UpdatePerformers(Performers instance);
    partial void DeletePerformers(Performers instance);
    partial void InsertPublishers(Publishers instance);
    partial void UpdatePublishers(Publishers instance);
    partial void DeletePublishers(Publishers instance);
    partial void InsertSongs(Songs instance);
    partial void UpdateSongs(Songs instance);
    partial void DeleteSongs(Songs instance);
    partial void InsertStyles(Styles instance);
    partial void UpdateStyles(Styles instance);
    partial void DeleteStyles(Styles instance);
    #endregion
		
		public MusicCollectionDBDataContext() : 
				base(global::LINQ_TO_SQL_TWO.Properties.Settings.Default.MusicCollectionConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MusicCollectionDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicCollectionDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicCollectionDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicCollectionDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MusicDiscs> MusicDiscs
		{
			get
			{
				return this.GetTable<MusicDiscs>();
			}
		}
		
		public System.Data.Linq.Table<Performers> Performers
		{
			get
			{
				return this.GetTable<Performers>();
			}
		}
		
		public System.Data.Linq.Table<Publishers> Publishers
		{
			get
			{
				return this.GetTable<Publishers>();
			}
		}
		
		public System.Data.Linq.Table<Songs> Songs
		{
			get
			{
				return this.GetTable<Songs>();
			}
		}
		
		public System.Data.Linq.Table<Styles> Styles
		{
			get
			{
				return this.GetTable<Styles>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MusicDiscs")]
	public partial class MusicDiscs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _PerformerId;
		
		private System.DateTime _ReleaseDate;
		
		private int _StyleId;
		
		private int _PublisherId;
		
		private EntitySet<Songs> _Songs;
		
		private EntityRef<Performers> _Performers;
		
		private EntityRef<Publishers> _Publishers;
		
		private EntityRef<Styles> _Styles;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPerformerIdChanging(int value);
    partial void OnPerformerIdChanged();
    partial void OnReleaseDateChanging(System.DateTime value);
    partial void OnReleaseDateChanged();
    partial void OnStyleIdChanging(int value);
    partial void OnStyleIdChanged();
    partial void OnPublisherIdChanging(int value);
    partial void OnPublisherIdChanged();
    #endregion
		
		public MusicDiscs()
		{
			this._Songs = new EntitySet<Songs>(new Action<Songs>(this.attach_Songs), new Action<Songs>(this.detach_Songs));
			this._Performers = default(EntityRef<Performers>);
			this._Publishers = default(EntityRef<Publishers>);
			this._Styles = default(EntityRef<Styles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerformerId", DbType="Int NOT NULL")]
		public int PerformerId
		{
			get
			{
				return this._PerformerId;
			}
			set
			{
				if ((this._PerformerId != value))
				{
					if (this._Performers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerformerIdChanging(value);
					this.SendPropertyChanging();
					this._PerformerId = value;
					this.SendPropertyChanged("PerformerId");
					this.OnPerformerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="Date NOT NULL")]
		public System.DateTime ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StyleId", DbType="Int NOT NULL")]
		public int StyleId
		{
			get
			{
				return this._StyleId;
			}
			set
			{
				if ((this._StyleId != value))
				{
					if (this._Styles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStyleIdChanging(value);
					this.SendPropertyChanging();
					this._StyleId = value;
					this.SendPropertyChanged("StyleId");
					this.OnStyleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherId", DbType="Int NOT NULL")]
		public int PublisherId
		{
			get
			{
				return this._PublisherId;
			}
			set
			{
				if ((this._PublisherId != value))
				{
					if (this._Publishers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisherIdChanging(value);
					this.SendPropertyChanging();
					this._PublisherId = value;
					this.SendPropertyChanged("PublisherId");
					this.OnPublisherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MusicDiscs_Songs", Storage="_Songs", ThisKey="Id", OtherKey="MusicDiscId")]
		public EntitySet<Songs> Songs
		{
			get
			{
				return this._Songs;
			}
			set
			{
				this._Songs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Performers_MusicDiscs", Storage="_Performers", ThisKey="PerformerId", OtherKey="Id", IsForeignKey=true)]
		public Performers Performers
		{
			get
			{
				return this._Performers.Entity;
			}
			set
			{
				Performers previousValue = this._Performers.Entity;
				if (((previousValue != value) 
							|| (this._Performers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Performers.Entity = null;
						previousValue.MusicDiscs.Remove(this);
					}
					this._Performers.Entity = value;
					if ((value != null))
					{
						value.MusicDiscs.Add(this);
						this._PerformerId = value.Id;
					}
					else
					{
						this._PerformerId = default(int);
					}
					this.SendPropertyChanged("Performers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publishers_MusicDiscs", Storage="_Publishers", ThisKey="PublisherId", OtherKey="Id", IsForeignKey=true)]
		public Publishers Publishers
		{
			get
			{
				return this._Publishers.Entity;
			}
			set
			{
				Publishers previousValue = this._Publishers.Entity;
				if (((previousValue != value) 
							|| (this._Publishers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publishers.Entity = null;
						previousValue.MusicDiscs.Remove(this);
					}
					this._Publishers.Entity = value;
					if ((value != null))
					{
						value.MusicDiscs.Add(this);
						this._PublisherId = value.Id;
					}
					else
					{
						this._PublisherId = default(int);
					}
					this.SendPropertyChanged("Publishers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Styles_MusicDiscs", Storage="_Styles", ThisKey="StyleId", OtherKey="Id", IsForeignKey=true)]
		public Styles Styles
		{
			get
			{
				return this._Styles.Entity;
			}
			set
			{
				Styles previousValue = this._Styles.Entity;
				if (((previousValue != value) 
							|| (this._Styles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Styles.Entity = null;
						previousValue.MusicDiscs.Remove(this);
					}
					this._Styles.Entity = value;
					if ((value != null))
					{
						value.MusicDiscs.Add(this);
						this._StyleId = value.Id;
					}
					else
					{
						this._StyleId = default(int);
					}
					this.SendPropertyChanged("Styles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Songs(Songs entity)
		{
			this.SendPropertyChanging();
			entity.MusicDiscs = this;
		}
		
		private void detach_Songs(Songs entity)
		{
			this.SendPropertyChanging();
			entity.MusicDiscs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Performers")]
	public partial class Performers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<MusicDiscs> _MusicDiscs;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Performers()
		{
			this._MusicDiscs = new EntitySet<MusicDiscs>(new Action<MusicDiscs>(this.attach_MusicDiscs), new Action<MusicDiscs>(this.detach_MusicDiscs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Performers_MusicDiscs", Storage="_MusicDiscs", ThisKey="Id", OtherKey="PerformerId")]
		public EntitySet<MusicDiscs> MusicDiscs
		{
			get
			{
				return this._MusicDiscs;
			}
			set
			{
				this._MusicDiscs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MusicDiscs(MusicDiscs entity)
		{
			this.SendPropertyChanging();
			entity.Performers = this;
		}
		
		private void detach_MusicDiscs(MusicDiscs entity)
		{
			this.SendPropertyChanging();
			entity.Performers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publishers")]
	public partial class Publishers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Country;
		
		private EntitySet<MusicDiscs> _MusicDiscs;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public Publishers()
		{
			this._MusicDiscs = new EntitySet<MusicDiscs>(new Action<MusicDiscs>(this.attach_MusicDiscs), new Action<MusicDiscs>(this.detach_MusicDiscs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publishers_MusicDiscs", Storage="_MusicDiscs", ThisKey="Id", OtherKey="PublisherId")]
		public EntitySet<MusicDiscs> MusicDiscs
		{
			get
			{
				return this._MusicDiscs;
			}
			set
			{
				this._MusicDiscs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MusicDiscs(MusicDiscs entity)
		{
			this.SendPropertyChanging();
			entity.Publishers = this;
		}
		
		private void detach_MusicDiscs(MusicDiscs entity)
		{
			this.SendPropertyChanging();
			entity.Publishers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Songs")]
	public partial class Songs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.TimeSpan _Duration;
		
		private int _MusicDiscId;
		
		private EntityRef<MusicDiscs> _MusicDiscs;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDurationChanging(System.TimeSpan value);
    partial void OnDurationChanged();
    partial void OnMusicDiscIdChanging(int value);
    partial void OnMusicDiscIdChanged();
    #endregion
		
		public Songs()
		{
			this._MusicDiscs = default(EntityRef<MusicDiscs>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Time NOT NULL")]
		public System.TimeSpan Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicDiscId", DbType="Int NOT NULL")]
		public int MusicDiscId
		{
			get
			{
				return this._MusicDiscId;
			}
			set
			{
				if ((this._MusicDiscId != value))
				{
					if (this._MusicDiscs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMusicDiscIdChanging(value);
					this.SendPropertyChanging();
					this._MusicDiscId = value;
					this.SendPropertyChanged("MusicDiscId");
					this.OnMusicDiscIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MusicDiscs_Songs", Storage="_MusicDiscs", ThisKey="MusicDiscId", OtherKey="Id", IsForeignKey=true)]
		public MusicDiscs MusicDiscs
		{
			get
			{
				return this._MusicDiscs.Entity;
			}
			set
			{
				MusicDiscs previousValue = this._MusicDiscs.Entity;
				if (((previousValue != value) 
							|| (this._MusicDiscs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MusicDiscs.Entity = null;
						previousValue.Songs.Remove(this);
					}
					this._MusicDiscs.Entity = value;
					if ((value != null))
					{
						value.Songs.Add(this);
						this._MusicDiscId = value.Id;
					}
					else
					{
						this._MusicDiscId = default(int);
					}
					this.SendPropertyChanged("MusicDiscs");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Styles")]
	public partial class Styles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<MusicDiscs> _MusicDiscs;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Styles()
		{
			this._MusicDiscs = new EntitySet<MusicDiscs>(new Action<MusicDiscs>(this.attach_MusicDiscs), new Action<MusicDiscs>(this.detach_MusicDiscs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Styles_MusicDiscs", Storage="_MusicDiscs", ThisKey="Id", OtherKey="StyleId")]
		public EntitySet<MusicDiscs> MusicDiscs
		{
			get
			{
				return this._MusicDiscs;
			}
			set
			{
				this._MusicDiscs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MusicDiscs(MusicDiscs entity)
		{
			this.SendPropertyChanging();
			entity.Styles = this;
		}
		
		private void detach_MusicDiscs(MusicDiscs entity)
		{
			this.SendPropertyChanging();
			entity.Styles = null;
		}
	}
}
#pragma warning restore 1591
